import re
import urllib.request
import socket
import sys
import os
import getpass
import json
import multiprocessing
import subprocess
import uuid
import pyfiglet
from colorama import init, Fore, Back

def banner(titel):
    init()
    print(Fore.CYAN+"*"*65+Fore.RESET)
    print(17*"-"+"\tCREATED BY 4N4RCH0\t"+"-"*17)
    print(Back.BLACK+Fore.CYAN+pyfiglet.figlet_format(titel, font="slant")+Back.RESET+Fore.RESET)
    print(Fore.CYAN+"*"*65+Fore.RESET)

def get_current_user():
    return getpass.getuser()

def get_sys_info():

    current_user = getpass.getuser()
    local_hostname = socket.gethostname()
    system_info = os.uname()

    mac_address = ':'.join(re.findall('..', '%012x' % uuid.getnode()))
    cpu_cores = multiprocessing.cpu_count()
    int_ip_addr = socket.gethostbyname(socket.gethostname())
    ext_ip_addr = urllib.request.urlopen('https://ident.me').read().decode("utf-8")
    return current_user, local_hostname, system_info, mac_address, cpu_cores, int_ip_addr, ext_ip_addr

def get_ip_geolocation():

    external_ip = urllib.request.urlopen('https://ident.me').read().decode("utf-8")
    geolocation_url = f"https://ipinfo.io/{external_ip}/json"
    response = urllib.request.urlopen(geolocation_url)
    geolocation_data = response.read().decode('utf-8')
    
    return geolocation_data

def show_system_info():

        print("[LOCAL HOST SYSTEM INFORMATION]\n")

        current_user, local_hostname, system_info, mac_address, cpu_cores, int_ip_addr, ext_ip_addr = get_sys_info()
        print(f"[ACCOUNT]\t{current_user}")
        print(f"[HOSTNAME]\t{local_hostname}")
        print(f"[USED OS]\t{system_info[0]}")
        print(f"[RELEASE]\t{system_info[2]}")
        print(f"[VERSION]\t{system_info[3]}")
        print(f"[USED ARCH]\t{system_info[4]}")
        print(f"[MAC ADDRESS]\t{mac_address}")
        print(f"[CPU CORES]\t{cpu_cores}")
        print(f"[INTERNAL IP]\t{int_ip_addr}")
        print(f"[EXTERNAL IP]\t{ext_ip_addr}")

        geo_ip_data = get_ip_geolocation()
        geo_data = json.loads(geo_ip_data)

        print(f"[CITY]\t{geo_data['city']}")
        print(f"[REGION]\t{geo_data['region']}")
        print(f"[COUNTRY]\t{geo_data['country']}")
        print(f"[REGISTER]\t{geo_data['org']}")
        print(f"[POSTAL]\t{geo_data['postal']}")
        print(f"[COUNTRY]\t{geo_data['timezone']}")

        print("-"*70)

def run_command(command):
    output = subprocess.check_output(command, shell=True)
    return output.decode().strip()

def create_folder(folder_name):
    try:
        os.mkdir(folder_name)
    except:
        pass

def deploy_environment(root_folder, folder_struct):
    create_folder(root_folder)
    print("\n[+] Environment root folder created")
    for folder in folder_struct:
        create_folder(folder_name=root_folder+"/"+folder)
        print(f"[+] {root_folder}/{folder} created.")
    print("\n[+] Creating folders finished.".upper())

def git_clone(github_repositories, destination_folder):
    print("\n")
    print(20*"-"+" DOWNLOADING FILES "+"-"*20)
    print("\n")
    for repo in github_repositories:
        clone_command = f"git clone {repo} {destination_folder}/{repo.split('/')[-1].split('.git')[0]}"
        subprocess.run(clone_command.split(), capture_output=True)
        print(f"[+] {repo.split('/')[-1].split('.git')[0]}\t-->\t[{destination_folder}{repo.split('/')[-1].split('.git')[0]}]")

def disable_ipv6():
    try:
        disable_command = "sudo sysctl -w net.ipv6.conf.all.disable_ipv6=1"
        subprocess.run(disable_command, shell=True)
        print("[!] For security reasons ipv6 is disabled.".upper())
    except Exception as e:
        print(f"[ERROR]\t{e}")
        sys.exit()
    
def main():

    # Creating the root folder for the environment
    current_user = get_current_user()
    root_folder = f"/home/{current_user}/Pentest-Environment"

    # Important folder basement to structure files as logical as possible
    folder_struct = [
        "Development",
        "Files",
        "Scripts",
        "System",
        "Tools"
    ]

    # OnyÄºy tool sources locted on github
    github_repositories = [
        "https://github.com/wpscanteam/wpscan.git",
        "https://github.com/1N3/Sn1per.git",
        "https://github.com/t3l3machus/hoaxshell.git",
        "https://github.com/jonaslejon/malicious-pdf.git"
        "https://github.com/htr-tech/zphisher.git",
        "https://github.com/gophish/gophish.git",
        "https://github.com/intrudir/BypassFuzzer.git",
        "https://github.com/aboul3la/Sublist3r.git",
        "https://github.com/maurosoria/dirsearch.git",
        "https://github.com/sqlmapproject/sqlmap.git",
        "https://github.com/rapid7/metasploit-framework.git",
        "https://github.com/hashcat/hashcat.git",
        "https://github.com/rapid7/metasploit-payloads.git",
        "https://github.com/trustedsec/social-engineer-toolkit.git",
        "https://github.com/aircrack-ng/aircrack-ng.git",
        "https://github.com/openwall/john.git",
        "https://github.com/openwall/johnny.git",
        "https://github.com/sullo/nikto.git",
        "https://github.com/tecknicaltom/dsniff.git"
    ]

    # Wordlist and dictionary ressources
    github_wordlists = [
        "https://github.com/swisskyrepo/PayloadsAllTheThings.git",
        "https://github.com/danielmiessler/SecLists.git"   
    ]

    tool_destination = f"{root_folder}/Tools/"
    wordlist_destination = f"{root_folder}/Files/Wordlists/"
    pentest_docu_destination = f"{root_folder}/Files/Pentest-Documents/"

    show_system_info()

    deploy_environment(root_folder=root_folder, folder_struct=folder_struct)

    # Cloning Tool and wordlist repos from github
    git_clone(github_repositories, tool_destination)
    git_clone(github_wordlists, wordlist_destination)

    # Create folder for pentest reports and documentation
    create_folder(pentest_docu_destination)

    # After the deployment finished we have to configure some OPSEC
    print("\n")
    disable_ipv6()

    print("\n[+] Pentest Environment Setup process finished.".upper())

if __name__ == '__main__':

    banner("Pentest Setup")

    main()